#!/usr/bin/env node

/******************
 *  Dependencies  *
 ******************/

var AWS = require('aws-sdk');
var fs = require('fs');

/***************
 *  deepEqual  *
 ***************/

// From https://github.com/substack/node-deep-equal

var pSlice = Array.prototype.slice;
var objectKeys = Object.keys;
function isArguments(object) {
    return Object.prototype.toString.call(object) == '[object Arguments]';
};

var deepEqual = function (actual, expected, opts) {
    if (!opts) opts = {};
    // 7.1. All identical values are equivalent, as determined by ===.
    if (actual === expected) {
        return true;

    } else if (actual instanceof Date && expected instanceof Date) {
        return actual.getTime() === expected.getTime();

    // 7.3. Other pairs that do not both pass typeof value == 'object',
    // equivalence is determined by ==.
    } else if (typeof actual != 'object' && typeof expected != 'object') {
        return opts.strict ? actual === expected : actual == expected;

    // 7.4. For all other Object pairs, including Array objects, equivalence is
    // determined by having the same number of owned properties (as verified
    // with Object.prototype.hasOwnProperty.call), the same set of keys
    // (although not necessarily the same order), equivalent values for every
    // corresponding key, and an identical 'prototype' property. Note: this
    // accounts for both named and indexed properties on Arrays.
    } else {
        return objEquiv(actual, expected, opts);
    }
}

function isUndefinedOrNull(value) {
    return value === null || value === undefined;
}

function isBuffer (x) {
    if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
    if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
        return false;
    }
    if (x.length > 0 && typeof x[0] !== 'number') return false;
    return true;
}

function objEquiv(a, b, opts) {
    var i, key;
    if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
        return false;
    // an identical 'prototype' property.
    if (a.prototype !== b.prototype) return false;
    //~~~I've managed to break Object.keys through screwy arguments passing.
    //   Converting to array solves the problem.
    if (isArguments(a)) {
        if (!isArguments(b)) {
            return false;
        }
        a = pSlice.call(a);
        b = pSlice.call(b);
        return deepEqual(a, b, opts);
    }
    if (isBuffer(a)) {
        if (!isBuffer(b)) {
            return false;
        }
        if (a.length !== b.length) return false;
        for (i = 0; i < a.length; i++) {
            if (a[i] !== b[i]) return false;
        }
        return true;
    }
    try {
        var ka = objectKeys(a),
                kb = objectKeys(b);
    } catch (e) {//happens when one is a string literal and the other isn't
        return false;
    }
    // having the same number of owned properties (keys incorporates
    // hasOwnProperty)
    if (ka.length != kb.length)
        return false;
    //the same set of keys (although not necessarily the same order),
    ka.sort();
    kb.sort();
    //~~~cheap key test
    for (i = ka.length - 1; i >= 0; i--) {
        if (ka[i] != kb[i])
            return false;
    }
    //equivalent values for every corresponding key, and
    //~~~possibly expensive deep test
    for (i = ka.length - 1; i >= 0; i--) {
        key = ka[i];
        if (!deepEqual(a[key], b[key], opts)) return false;
    }
    return typeof a === typeof b;
}

/************
 *  Extend  *
 ************/

// From https://github.com/justmoon/node-extend

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;
var undefined;

var isPlainObject = function isPlainObject(obj) {
    'use strict';
    if (!obj || toString.call(obj) !== '[object Object]') {
        return false;
    }

    var has_own_constructor = hasOwn.call(obj, 'constructor');
    var has_is_property_of_method = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
    // Not own constructor property must be Object
    if (obj.constructor && !has_own_constructor && !has_is_property_of_method) {
        return false;
    }

    // Own properties are enumerated firstly, so to speed up,
    // if last one is own, then all properties are own.
    var key;
    for (key in obj) {}

    return key === undefined || hasOwn.call(obj, key);
};

function extend() {
    'use strict';
    var options, name, src, copy, copyIsArray, clone,
        target = arguments[0],
        i = 1,
        length = arguments.length,
        deep = false;

    // Handle a deep copy situation
    if (typeof target === 'boolean') {
        deep = target;
        target = arguments[1] || {};
        // skip the boolean and the target
        i = 2;
    } else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {
        target = {};
    }

    for (; i < length; ++i) {
        options = arguments[i];
        // Only deal with non-null/undefined values
        if (options != null) {
            // Extend the base object
            for (name in options) {
                src = target[name];
                copy = options[name];

                // Prevent never-ending loop
                if (target === copy) {
                    continue;
                }

                // Recurse if we're merging plain objects or arrays
                if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                    if (copyIsArray) {
                        copyIsArray = false;
                        clone = src && Array.isArray(src) ? src : [];
                    } else {
                        clone = src && isPlainObject(src) ? src : {};
                    }

                    // Never move original objects, clone them
                    target[name] = extend(deep, clone, copy);

                // Don't bring in undefined values
                } else if (copy !== undefined) {
                    target[name] = copy;
                }
            }
        }
    }

    // Return the modified object
    return target;
};

/****************
 *  Parameters  *
 ****************/

/**
 * aws_access_key
 * aws_secret_key
 * root_object
 * origin_path
 * id
 */

var args = process.argv;
var params = {};
var argsFile = fs.readFileSync(args[2]).toString();

args = argsFile.split(' ');

// Collects all parameters for the module
args.forEach(function(arg) {
    var arr, key, value;

    if (arg.indexOf('=') > 0) {
            arr = arg.split('=');
            key = arr[0];
            value = arr[1];
            params[key] = value;
    }
});

/***************
 *  Messaging  *
 ***************/

/**
 * Generates an Ansible error output and sends it to stdout
 * @param {String} msg The error message
 */
function error(msg) {
    process.stdout.write(JSON.stringify({
            failed: true,
            msg: msg
    }));
    process.exit(1);
}

/**
 * Generates an Ansible success output and sends to stdout
 * @param {Boolean} changed Whether a change was made
 */
function success(changed, data) {
    var msgObject = {
            changed: changed
    };

    // Extend with additional info
    if (data) { extend(msgObject, data); }

    process.stdout.write(JSON.stringify(msgObject));
    process.exit(0);
}

/***************
 *  Configure  *
 ***************/

AWS.config.accessKeyId = params.aws_access_key || process.env.AWS_ACCESS_KEY_ID;
AWS.config.secretAccessKey = params.aws_secret_key || process.env.AWS_SECRET_ACCESS_KEY;

/****************
 *  Cloudfront  *
 ****************/

var cloudfront = new AWS.CloudFront();

cloudfront.getDistributionConfig({
        Id: params.id
}, function(err, data) {
    var etag;
    var copy = extend(true, {}, data);

    // Throw errors
    if (err) {
        error(err);
        return;
    }

    // Update root object
    data.DefaultRootObject = params.root_object || data.DefaultRootObject;

    // Update origin path of all items
    if (data.Origins.Items && data.Origins.Items.length) {
        data.Origins.Items.forEach(function(item) {

            // Correct for root path designation
            if (params.origin_path === '/') {
                item.OriginPath = '';
            } else {
                item.OriginPath = params.origin_path || item.OriginPath;
            }
        });
    }

    // Do nothing if no changes
    if (deepEqual(data, copy)) {
        success(false);
    }

    // Update configuration
    else {

        // AWS doesn't want ETag in config object
        etag = data.ETag;
        delete data.ETag;

        // Reconfigure distribution
        cloudfront.updateDistribution({
            IfMatch: etag,
            Id: params.id,
            DistributionConfig: data
        }, function(err, data) {

            // Throw errors
            if (err) {
                error(err);
                return;
            }

            success(true);
        });
    }
});